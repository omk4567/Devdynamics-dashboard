{"version":3,"sources":["components/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Dashboard","data","setData","useState","filteredData","setFilteredData","filter","setFilter","useEffect","axios","get","then","response","catch","error","console","chartData","map","activity","timestamp","Date","toLocaleTimeString","React","createElement","value","onChange","event","target","type","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","stroke","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+SAuEeA,MA9DaA,KAC1B,MAAOC,EAAMC,GAAWC,mBAAqB,KACtCC,EAAcC,GAAmBF,mBAAqB,KACtDG,EAAQC,GAAaJ,mBAAiB,OAE7CK,oBAAU,KACRC,IAAMC,IAAI,cACPC,KAAKC,IACJV,EAAQU,EAASX,MACjBI,EAAgBO,EAASX,QAE1BY,MAAMC,IACLC,QAAQD,MAAM,uBAAwBA,MAEzC,IAEH,MAUME,EAAYZ,EAAaa,IAAIC,IAAQ,IACtCA,EACHC,UAAW,IAAIC,KAAKF,EAASC,WAAWE,wBAG1C,OACEC,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,gCACJD,IAAAC,cAAA,WACED,IAAAC,cAAA,aAAO,4BACPD,IAAAC,cAAA,UAAQC,MAAOlB,EAAQmB,SApBDC,IAC1B,MAAMF,EAAQE,EAAMC,OAAOH,MAC3BjB,EAAUiB,GAERnB,EADY,QAAVmB,EACcvB,EAEAA,EAAKK,OAAOY,GAAYA,EAASU,OAASJ,MAetDF,IAAAC,cAAA,UAAQC,MAAM,OAAM,OACpBF,IAAAC,cAAA,UAAQC,MAAM,UAAS,UACvBF,IAAAC,cAAA,UAAQC,MAAM,uBAAsB,uBACpCF,IAAAC,cAAA,UAAQC,MAAM,sBAAqB,sBACnCF,IAAAC,cAAA,UAAQC,MAAM,WAAU,WACxBF,IAAAC,cAAA,UAAQC,MAAM,iBAAgB,mBAGlCF,IAAAC,cAACM,IAAS,CACRC,MAAO,IACPC,OAAQ,IACR9B,KAAMe,EACNgB,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAE/Cd,IAAAC,cAACc,IAAa,CAACC,gBAAgB,QAC/BhB,IAAAC,cAACgB,IAAK,CAACC,QAAQ,cACflB,IAAAC,cAACkB,IAAK,MACNnB,IAAAC,cAACmB,IAAO,MACRpB,IAAAC,cAACoB,IAAM,MACPrB,IAAAC,cAACqB,IAAI,CAAChB,KAAK,WAAWY,QAAQ,OAAOK,OAAO,eCrDrCC,MAROA,IAElBxB,IAAAC,cAAA,OAAKwB,UAAU,OACbzB,IAAAC,cAACvB,EAAS,OCODgD,MAZUC,IACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAzC,KAAAwC,EAAAE,KAAA,WAAqB1C,KAAK2C,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCHDW,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH1C,IAAAC,cAACD,IAAM2C,WAAU,KACf3C,IAAAC,cAACuB,EAAG,QAORE","file":"static/js/main.c3646eee.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\ninterface Activity {\r\n  type: string;\r\n  timestamp: string;\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [data, setData] = useState<Activity[]>([]);\r\n  const [filteredData, setFilteredData] = useState<Activity[]>([]);\r\n  const [filter, setFilter] = useState<string>('all');\r\n\r\n  useEffect(() => {\r\n    axios.get('/data.json')\r\n      .then(response => {\r\n        setData(response.data);\r\n        setFilteredData(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  }, []);\r\n\r\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const value = event.target.value;\r\n    setFilter(value);\r\n    if (value === 'all') {\r\n      setFilteredData(data);\r\n    } else {\r\n      setFilteredData(data.filter(activity => activity.type === value));\r\n    }\r\n  };\r\n\r\n  const chartData = filteredData.map(activity => ({\r\n    ...activity,\r\n    timestamp: new Date(activity.timestamp).toLocaleTimeString(),\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h1>Developer Activity Dashboard</h1>\r\n      <div>\r\n        <label>Filter by activity type:</label>\r\n        <select value={filter} onChange={handleFilterChange}>\r\n          <option value=\"all\">All</option>\r\n          <option value=\"commit\">Commit</option>\r\n          <option value=\"pull_request_opened\">Pull Request Opened</option>\r\n          <option value=\"merge_pull_request\">Merge Pull Request</option>\r\n          <option value=\"meeting\">Meeting</option>\r\n          <option value=\"documentation\">Documentation</option>\r\n        </select>\r\n      </div>\r\n      <LineChart\r\n        width={600}\r\n        height={300}\r\n        data={chartData}\r\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"timestamp\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line type=\"monotone\" dataKey=\"type\" stroke=\"#8884d8\" />\r\n      </LineChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n};\n\nexport default App;        \n\n\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}